Certainly! You can create a separate XMLManagers.XMLTransformer class for the project to encapsulate the XML to HTML transformation logic. Here's how you can structure the XMLManagers.XMLTransformer class:

java

import javax.xml.transform.*;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

public class XMLManagers.XMLTransformer {

    public static void transformXMLToHTML(String xmlFilePath, String xsltFilePath, String htmlOutputFilePath) throws TransformerException, IOException {
        // Create a TransformerFactory
        TransformerFactory transformerFactory = TransformerFactory.newInstance();

        // Specify the XSLT file
        StreamSource xsltSource = new StreamSource(new File(xsltFilePath));

        // Create a Transformer for the XSLT stylesheet
        Transformer transformer = transformerFactory.newTransformer(xsltSource);

        // Specify the XML source file
        StreamSource xmlSource = new StreamSource(new File(xmlFilePath));

        // Create an output stream for the HTML result
        try (FileOutputStream htmlOutput = new FileOutputStream(htmlOutputFilePath)) {
            StreamResult htmlResult = new StreamResult(htmlOutput);

            // Apply the XSLT transformation and save as HTML
            transformer.transform(xmlSource, htmlResult);
        }
    }
}